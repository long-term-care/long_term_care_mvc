@model IEnumerable<long_term_care.Models.LectureClass>

@{
    ViewData["Title"] = "Create";
    var dataweek1 = Model.FirstOrDefault(x => x.Weeknum == 1);
    var dataweek2 = Model.FirstOrDefault(x => x.Weeknum == 2);
    var dataweek3 = Model.FirstOrDefault(x => x.Weeknum == 3);
    var dataweek4 = Model.FirstOrDefault(x => x.Weeknum == 4);
    var dataweek5 = Model.FirstOrDefault(x => x.Weeknum == 5);
}
<link rel="stylesheet" href="https://unpkg.com/swiper/swiper-bundle.min.css" />
<script src="https://unpkg.com/swiper/swiper-bundle.min.js"></script>
<style>
    html, body {
        width: 100%;
        height: 100%;
        overflow: hidden;
    }
    body {
     background: #e0e6eb;
    }

    svg {
        width: 100%;
        height: 100%;
        g {
            mix-blend-mode: lighten;
        }
        polygon {
            stroke: none;
            fill: white;
        }
    }
    #container {
        display: flex;
        flex-direction: column;
        width: 100%;
        margin-top: 20px;
        align-items: center;
    }

    .row {
        display: flex;
        justify-content: space-between;
        padding: 10px 0;
        box-shadow: 0px 1px 0px #ccc, 0px -1px 0px #ccc, 1px 0px 0px #ccc, -1px 0px 0px #ccc;
        margin-bottom: 10px;
    }

        .row > div {
            display: flex;
            align-items: center;
            justify-content: center;
            flex: 1;
        }

    .btn-flip {
        width: 60px;
        height: 30px;
        background-color: #f5f5f5;
        color: #000;
        border: none;
        border-radius: 15px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: 0.3s;
    }

        .btn-flip:hover {
            background-color: #ddd;
        }

    .switch {
        position: relative;
        display: inline-block;
        width: 60px;
        height: 34px;
    }

        .switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

    .slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #ccc;
        -webkit-transition: .4s;
        transition: .4s;
    }

        .slider:before {
            position: absolute;
            content: "";
            height: 26px;
            width: 26px;
            left: 4px;
            bottom: 4px;
            background-color: white;
            -webkit-transition: .4s;
            transition: .4s;
        }

    input:checked + .slider {
        background-color: #2196F3;
    }

    input:focus + .slider {
        box-shadow: 0 0 1px #2196F3;
    }

    input:checked + .slider:before {
        -webkit-transform: translateX(26px);
        -ms-transform: translateX(26px);
        transform: translateX(26px);
    }

    .slider.round {
        border-radius: 34px;
    }

        .slider.round:before {
            border-radius: 50%;
        }

    .send {
        width: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
    }

        .send button {
            width: 300px;
            height: 70px;
            font-size: 16px;
            margin: 3%;
        }
        .pos {
        position: relative;
        margin: 0 auto;}
</style>
<svg id="demo" viewBox="0 0 1600 600" preserveAspectRatio="xMidYMid slice">
    <defs>
        <linearGradient id="grad1" x1="0" y1="0" x2="1" y2="0" color-interpolation="sRGB">
            <stop id="stop1a" offset="0%" stop-color="#12a3b4"></stop>
            <stop id="stop1b" offset="100%" stop-color="#ff509e"></stop>
        </linearGradient>
        <linearGradient id="grad2" x1="0" y1="0" x2="1" y2="0" color-interpolation="sRGB">
            <stop id="stop2a" offset="0%" stop-color="#e3bc13"></stop>
            <stop id="stop2b" offset="100%" stop-color="#00a78f"></stop>
        </linearGradient>
    </defs>
    <rect id="rect1" x="0" y="0" width="1600" height="600" stroke="none" fill="url(#grad1)"></rect>
    <rect id="rect2" x="0" y="0" width="1600" height="600" stroke="none" fill="url(#grad2)"></rect>
</svg>
<div id="container POS">
    <div class="row">
        <div>星期一</div>
        <div>
            <select id="week1">
                <option value="課程開始時間">課程開始時間</option>
                <option value="SchA">7:30 - 8:30</option>
                <option value="SchB">8:30 - 9:00</option>
                <option value="SchC">9:00 - 9:30</option>
                <option value="SchD">9:30 - 12:00</option>
                <option value="SchE">13:00 - 16:00</option>
            </select>
        </div>
        <div>
            <input type="text" id="subject1"  placeholder="課程">
        </div>
        <div>
            <input type="button" class="btn btn-secondary" id="week1fix" value="修改課程">
        </div>
        <div>
            <button class="btn-flip" id="class1">空堂</button>
        </div>
    </div>
    <div class="row">
        <div>星期二</div>
        <div>
            <select id="week2">
                <option value="課程開始時間">課程開始時間</option>
                <option value="SchA">7:30 - 8:30</option>
                <option value="SchB">8:30 - 9:00</option>
                <option value="SchC">9:00 - 9:30</option>
                <option value="SchD">9:30 - 12:00</option>
                <option value="SchE">13:00 - 16:00</option>
            </select>
        </div>
        <div>
            <input type="text" id="subject2" placeholder="課程">
        </div>
        <div>
            <input type="button" class="btn btn-secondary" id="week2fix" value="修改課程">
        </div>
        <div>
            <button class="btn-flip" id="class2">空堂</button>
        </div>
    </div>
    <div class="row">
        <div>星期三</div>
        <div>
            <select id="week3">
                <option value="課程開始時間">課程開始時間</option>
                <option value="SchA">7:30 - 8:30</option>
                <option value="SchB">8:30 - 9:00</option>
                <option value="SchC">9:00 - 9:30</option>
                <option value="SchD">9:30 - 12:00</option>
                <option value="SchE">13:00 - 16:00</option>
            </select>
        </div>
        <div>
            <input type="text" id="subject3" placeholder="課程">
        </div>
        <div>
            <input type="button" class="btn btn-secondary" id="week3fix" value="修改課程">
        </div>
        <div>
            <button class="btn-flip" id="class3">空堂</button>
        </div>
    </div>
    <div class="row">
        <div>星期四</div>
        <div>
            <select id="week4">
                <option value="課程開始時間">課程開始時間</option>
                <option value="SchA">7:30 - 8:30</option>
                <option value="SchB">8:30 - 9:00</option>
                <option value="SchC">9:00 - 9:30</option>
                <option value="SchD">9:30 - 12:00</option>
                <option value="SchE">13:00 - 16:00</option>
            </select>
        </div>

        <div>
            <input type="text" id="subject4" placeholder="課程">
        </div>
        <div>
            <input type="button" class="btn btn-secondary" id="week4fix" value="修改課程">
        </div>
        <div>
            <button class="btn-flip" id="class4">空堂</button>
        </div>
    </div>
    <div class="row">
        <div>星期五</div>
        <div>
            <select id="week5">
                <option value="課程開始時間">課程開始時間</option>
                <option value="SchA">7:30 - 8:30</option>
                <option value="SchB">8:30 - 9:00</option>
                <option value="SchC">9:00 - 9:30</option>
                <option value="SchD">9:30 - 12:00</option>
                <option value="SchE">13:00 - 16:00</option>
            </select>
        </div>

        <div>
            <input type="text" id="subject5" placeholder="課程">
        </div>
        <div>
            <input type="button" class="btn btn-secondary" id="week5fix" value="修改課程">
        </div>
        <div>
            <button class="btn-flip" id="class5">空堂</button>
        </div>
    </div>
    <div class="send">
        <button type="button" class="btn btn-primary" onclick="location.href='@Url.Action("Index", "LectureClasses")'">返回</button>
    </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/latest/TweenMax.min.js"></script>

<script>

    function init(showStats) {
        if (showStats) {
            var stats = new Stats();
            stats.domElement.style.position = 'absolute';
            stats.domElement.style.left = '0';
            stats.domElement.style.top = '0';
            document.body.appendChild(stats.domElement);
            requestAnimationFrame(function updateStats() {
                stats.update();
                requestAnimationFrame(updateStats);
            });
        }

        var svg = document.getElementById('demo');
        tesselation.setup(svg);
        gradients.setup();

        var lastTransitionAt, transitionDelay = 5500, transitionDuration = 3000;

        function playNextTransition() {
            tesselation.next(transitionDuration);
            gradients.next(transitionDuration);
        };

        function tick(time) {
            if (!lastTransitionAt || time - lastTransitionAt > transitionDelay) {
                lastTransitionAt = time;
                playNextTransition();
            }
            window.requestAnimationFrame(tick);
        }
        window.requestAnimationFrame(tick);
    }

    var calcDelaunayTriangulation = (function () {
        var EPSILON = 1.0 / 1048576.0;
        function getSuperT(vertices) {
            var xMin = Number.POSITIVE_INFINITY, yMin = Number.POSITIVE_INFINITY,
                xMax = Number.NEGATIVE_INFINITY, yMax = Number.NEGATIVE_INFINITY,
                i, xDiff, yDiff, maxDiff, xCenter, yCenter;
            for (i = vertices.length; i--;) {
                if (vertices[i][0] < xMin) xMin = vertices[i][0];
                if (vertices[i][0] > xMax) xMax = vertices[i][0];
                if (vertices[i][1] < yMin) yMin = vertices[i][1];
                if (vertices[i][1] > yMax) yMax = vertices[i][1];
            }
            xDiff = xMax - xMin;
            yDiff = yMax - yMin;
            maxDiff = Math.max(xDiff, yDiff);
            xCenter = xMin + xDiff * 0.5;
            yCenter = yMin + yDiff * 0.5;
            return [
                [xCenter - 20 * maxDiff, yCenter - maxDiff],
                [xCenter, yCenter + 20 * maxDiff],
                [xCenter + 20 * maxDiff, yCenter - maxDiff]
            ];
        }
        function circumcircle(vertices, i, j, k) {
            var xI = vertices[i][0], yI = vertices[i][1],
                xJ = vertices[j][0], yJ = vertices[j][1],
                xK = vertices[k][0], yK = vertices[k][1],
                yDiffIJ = Math.abs(yI - yJ), yDiffJK = Math.abs(yJ - yK),
                xCenter, yCenter, m1, m2, xMidIJ, xMidJK, yMidIJ, yMidJK, xDiff, yDiff;
            if (yDiffIJ < EPSILON && yDiffJK < EPSILON)
                throw new Error("Can't get circumcircle since all 3 points are y-aligned");
            m1 = -((xJ - xI) / (yJ - yI));
            m2 = -((xK - xJ) / (yK - yJ));
            xMidIJ = (xI + xJ) / 2.0;
            xMidJK = (xJ + xK) / 2.0;
            yMidIJ = (yI + yJ) / 2.0;
            yMidJK = (yJ + yK) / 2.0;
            xCenter = (yDiffIJ < EPSILON) ? xMidIJ :
                (yDiffJK < EPSILON) ? xMidJK :
                    (m1 * xMidIJ - m2 * xMidJK + yMidJK - yMidIJ) / (m1 - m2);
            yCenter = (yDiffIJ > yDiffJK) ?
                m1 * (xCenter - xMidIJ) + yMidIJ :
                m2 * (xCenter - xMidJK) + yMidJK;
            xDiff = xJ - xCenter;
            yDiff = yJ - yCenter;
            return { i: i, j: j, k: k, x: xCenter, y: yCenter, r: xDiff * xDiff + yDiff * yDiff };
        }
        function dedupeEdges(edges) {
            var i, j, a, b, m, n;
            for (j = edges.length; j;) {
                b = edges[--j]; a = edges[--j];
                for (i = j; i;) {
                    n = edges[--i]; m = edges[--i];
                    if ((a === m && b === n) || (a === n && b === m)) {
                        edges.splice(j, 2); edges.splice(i, 2);
                        break;
                    }
                }
            }
        }
        return function (vertices) {
            var n = vertices.length,
                i, j, indices, st, candidates, locked, edges, dx, dy, a, b, c;
            if (n < 3 || n > 2000)
                return [];
            vertices = vertices.slice(0);
            indices = new Array(n);
            for (i = n; i--;)
                indices[i] = i;
            indices.sort(function (i, j) {
                return vertices[j][0] - vertices[i][0];
            });
            
            st = getSuperT(vertices);
            vertices.push(st[0], st[1], st[2]);
            candidates = [circumcircle(vertices, n + 0, n + 1, n + 2)];
            locked = [];
            edges = [];
            for (i = indices.length; i--; edges.length = 0) {
                c = indices[i];
                for (j = candidates.length; j--;) {
                    dx = vertices[c][0] - candidates[j].x;
                    if (dx > 0.0 && dx * dx > candidates[j].r) {
                        locked.push(candidates[j]);
                        candidates.splice(j, 1);
                        continue;
                    }
                    dy = vertices[c][1] - candidates[j].y;
                    if (dx * dx + dy * dy - candidates[j].r > EPSILON)
                        continue;
                    edges.push(
                        candidates[j].i, candidates[j].j,
                        candidates[j].j, candidates[j].k,
                        candidates[j].k, candidates[j].i
                    );
                    candidates.splice(j, 1);
                }
                dedupeEdges(edges);
                for (j = edges.length; j;) {
                    b = edges[--j];
                    a = edges[--j];
                    candidates.push(circumcircle(vertices, a, b, c));
                }
            }
            for (i = candidates.length; i--;)
                locked.push(candidates[i]);
            candidates.length = 0;
            for (i = locked.length; i--;)
                if (locked[i].i < n && locked[i].j < n && locked[i].k < n)
                    candidates.push(locked[i].i, locked[i].j, locked[i].k);
            return candidates;
        };
    })();

    var tesselation = (function () {
        var svg, svgW, svgH, prevGroup;

        function createRandomTesselation() {
            var wW = window.innerWidth;
            var wH = window.innerHeight;

            var gridSpacing = 250, scatterAmount = 0.75;
            var gridSize, i, x, y;

            if (wW / wH > svgW / svgH) {
                gridSize = gridSpacing * svgW / wW;
            } else { 
                gridSize = gridSpacing * svgH / wH;
            }

            var vertices = [];
            var xOffset = (svgW % gridSize) / 2, yOffset = (svgH % gridSize) / 2;
            for (x = Math.floor(svgW / gridSize) + 1; x >= -1; x--) {
                for (y = Math.floor(svgH / gridSize) + 1; y >= -1; y--) {
                    vertices.push(
                        [
                            xOffset + gridSize * (x + scatterAmount * (Math.random() - 0.5)),
                            yOffset + gridSize * (y + scatterAmount * (Math.random() - 0.5))
                        ]
                    );
                }
            }

            var triangles = calcDelaunayTriangulation(vertices);

            var group = document.createElementNS('http://www.w3.org/2000/svg', 'g');
            var polygon;
            for (i = triangles.length; i;) {
                polygon = document.createElementNS('http://www.w3.org/2000/svg', 'polygon');
                polygon.setAttribute('points',
                    vertices[triangles[--i]][0] + ',' + vertices[triangles[i]][1] + ' ' +
                    vertices[triangles[--i]][0] + ',' + vertices[triangles[i]][1] + ' ' +
                    vertices[triangles[--i]][0] + ',' + vertices[triangles[i]][1]
                );
                group.appendChild(polygon);
            }

            return group;
        }

        return {
            setup: function (svgElement) {
                svg = svgElement;
                var vb = svg.getAttribute('viewBox').split(/\D/g);
                svgW = vb[2];
                svgH = vb[3];
            },
            next: function (t) {
                var toRemove, i, n;
                t /= 1000;

                if (prevGroup && prevGroup.children && prevGroup.children.length) {
                    toRemove = prevGroup;
                    n = toRemove.children.length;
                    for (i = n; i--;) {
                        TweenMax.to(toRemove.children[i], t * 0.4, { opacity: 0, delay: t * (0.3 * i / n) });
                    }
                    TweenMax.delayedCall(t * (0.7 + 0.05), function (group) { svg.removeChild(group); }, [toRemove], this);
                }
                var g = createRandomTesselation();
                n = g.children.length;
                for (i = n; i--;) {
                    TweenMax.fromTo(g.children[i], t * 0.4, { opacity: 0 }, { opacity: 0.3 + 0.25 * Math.random(), delay: t * (0.3 * i / n + 0.3), ease: Back.easeOut });
                }
                svg.appendChild(g);
                prevGroup = g;
            }
        }
    })();


    var gradients = (function () {
        var grad1, grad2, showingGrad1;

        
        var colors = [ 
            '#3c6df0', 
            '#12a3b4', 
            '#00a78f', 
            '#00aa5e', 
            '#81b532', 
            '#e3bc13', 
            '#ffb000', 
            '#fe8500', 
            '#fe6100', 
            '#e62325', 
            '#dc267f', 
            '#c22dd5', 
            '#9753e1', 
            '#5a3ec8'  
        ];

        function assignRandomColors(gradObj) {
            var rA = Math.floor(colors.length * Math.random());
            var rB = Math.floor(Math.random() * 3) + 3; 
            rB = (rA + (rB * (Math.random() < 0.5 ? -1 : 1)) + colors.length) % colors.length;
            gradObj.stopA.setAttribute('stop-color', colors[rA]);
            gradObj.stopB.setAttribute('stop-color', colors[rB]);
        }

        return {
            setup: function () {
                showingGrad1 = false;
                grad1 = {
                    stopA: document.getElementById('stop1a'),
                    stopB: document.getElementById('stop1b'),
                    rect: document.getElementById('rect1')
                };
                grad2 = {
                    stopA: document.getElementById('stop2a'),
                    stopB: document.getElementById('stop2b'),
                    rect: document.getElementById('rect2')
                };
                grad1.rect.style.opacity = 0;
                grad2.rect.style.opacity = 0;
            },
            next: function (t) {
                t /= 1000;

                var show, hide;
                if (showingGrad1) {
                    hide = grad1;
                    show = grad2;
                } else {
                    hide = grad2;
                    show = grad1;
                }
                showingGrad1 = !showingGrad1;

                TweenMax.to(hide.rect, 0.55 * t, { opacity: 0, delay: 0.2 * t, ease: Sine.easeOut });
                assignRandomColors(show);
                TweenMax.to(show.rect, 0.65 * t, { opacity: 1, ease: Sine.easeIn });
            }
        };
    })();

    init();

    </script>
<script>
    // 將伺服器端變數傳遞給JavaScript變數
    var dataweek1 = @Json.Serialize(dataweek1.Weeknum);
    var dataweek2 = @Json.Serialize(dataweek2.Weeknum);
    var dataweek3 = @Json.Serialize(dataweek3.Weeknum);
    var dataweek4 = @Json.Serialize(dataweek4.Weeknum);
    var dataweek5 = @Json.Serialize(dataweek5.Weeknum);

    var SchA = @Json.Serialize(ViewBag.SchA);
    var SchB = @Json.Serialize(ViewBag.SchB);
    var SchC = @Json.Serialize(ViewBag.SchC);
    var SchD = @Json.Serialize(ViewBag.SchD);
    var SchE = @Json.Serialize(ViewBag.SchE);

    var class1 = document.getElementById("class1")
    var fixbtn1 = document.getElementById("week1fix")

    var class2 = document.getElementById("class2")
    var fixbtn2 = document.getElementById("week2fix")

    var class3 = document.getElementById("class3")
    var fixbtn3 = document.getElementById("week3fix")

    var class4 = document.getElementById("class4")
    var fixbtn4 = document.getElementById("week4fix")

    var class5 = document.getElementById("class5")
    var fixbtn5 = document.getElementById("week5fix")

    let week1 = document.getElementById("week1");
    week1.addEventListener('change', function () {
        let week1value = this.value; // 获取选中的值

        if (week1value === 'SchA') {
            if (dataweek1 == SchA) {

                class1.innerHTML = "衝堂"
                class1.style.color = "red";
                fixbtn1.disabled = true;
            }
            else {
                class1.innerHTML = "空堂"
                class1.style.color = "black";
                fixbtn1.disabled = false;
            }
        }
        if (week1value === 'SchB') {
            if (dataweek1 == SchB) {

                class1.innerHTML = "衝堂"
                class1.style.color = "red";
                fixbtn1.disabled = true;
            }
            else {
                class1.innerHTML = "空堂"
                class1.style.color = "black";
                fixbtn1.disabled = false;
            }
        }
        if (week1value === 'SchC') {
            if (dataweek1 == SchC) {
                class1.innerHTML = "衝堂"
                class1.style.color = "red";
                fixbtn1.disabled = true;
            }
            else {
                class1.innerHTML = "空堂"
                class1.style.color = "black";
                fixbtn1.disabled = false;
            }
        }
        if (week1value === 'SchD') {

            if (dataweek1 == SchD) {
                class1.innerHTML = "衝堂"
                class1.style.color = "red";
                fixbtn1.disabled = true;
            }
            else {
                class1.innerHTML = "空堂"
                class1.style.color = "black";
                fixbtn1.disabled = false;
            }
        }
        if (week1value === 'SchE') {
            if (dataweek1 == SchE) {
                class1.innerHTML = "衝堂"
                class1.style.color = "red";
                fixbtn1.disabled = true;
            }
            else {
                class1.innerHTML = "空堂"
                class1.style.color = "black";
                fixbtn1.disabled = false;
            }
        }

    });

    let week2 = document.getElementById("week2");
    week2.addEventListener('change', function () {
        let week2value = this.value; // 获取选中的值

        if (week2value === 'SchA') {
            if (dataweek2 == SchA) {

                class2.innerHTML = "衝堂"
                class2.style.color = "red";
                fixbtn2.disabled = true;
            }
            else {
                class2.innerHTML = "空堂"
                class2.style.color = "black";
                fixbtn2.disabled = false;
            }
        }
        if (week2value === 'SchB') {
            if (dataweek2 == SchB) {

                class2.innerHTML = "衝堂"
                class2.style.color = "red";
                fixbtn2.disabled = true;
            }
            else {
                class2.innerHTML = "空堂"
                class2.style.color = "black";
                fixbtn2.disabled = false;
            }
        }
        if (week2value === 'SchC') {
            if (dataweek2 == SchC) {
                class2.innerHTML = "衝堂"
                class2.style.color = "red";
                fixbtn2.disabled = true;
            }
            else {
                class2.innerHTML = "空堂"
                class2.style.color = "black";
                fixbtn2.disabled = false;
            }
        }
        if (week2value === 'SchD') {

            if (dataweek2 == SchD) {
                class2.innerHTML = "衝堂"
                class2.style.color = "red";
                fixbtn2.disabled = true;
            }
            else {
                class2.innerHTML = "空堂"
                class2.style.color = "black";
                fixbtn2.disabled = false;
            }
        }
        if (week2value === 'SchE') {
            if (dataweek2 == SchE) {
                class2.innerHTML = "衝堂"
                class2.style.color = "red";
                fixbtn2.disabled = true;
            }
            else {
                class2.innerHTML = "空堂"
                class2.style.color = "black";
                fixbtn2.disabled = false;
            }
        }

    });

    let week3 = document.getElementById("week3");
    week3.addEventListener('change', function () {
        let week3value = this.value; // 获取选中的值

        if (week3value === 'SchA') {
            if (dataweek3 == SchA) {

                class3.innerHTML = "衝堂"
                class3.style.color = "red";
                fixbtn3.disabled = true;
            }
            else {
                class3.innerHTML = "空堂"
                class3.style.color = "black";
                fixbtn3.disabled = false;
            }
        }
        if (week3value === 'SchB') {
            if (dataweek3 == SchB) {

                class3.innerHTML = "衝堂"
                class3.style.color = "red";
                fixbtn3.disabled = true;
            }
            else {
                class3.innerHTML = "空堂"
                class3.style.color = "black";
                fixbtn3.disabled = false;
            }
        }
        if (week3value === 'SchC') {
            if (dataweek3 == SchC) {

                class3.innerHTML = "衝堂"
                class3.style.color = "red";
                fixbtn3.disabled = true;
            }
            else {
                class3.innerHTML = "空堂"
                class3.style.color = "black";
                fixbtn3.disabled = false;
            }
        }
        if (week3value === 'SchD') {

            if (dataweek3 == SchD) {

                class3.innerHTML = "衝堂"
                class3.style.color = "red";
                fixbtn3.disabled = true;
            }
            else {
                class3.innerHTML = "空堂"
                class3.style.color = "black";
                fixbtn3.disabled = false;
            }
        }
        if (week3value === 'SchE') {
            if (dataweek3 == SchE) {

                class3.innerHTML = "衝堂"
                class3.style.color = "red";
                fixbtn3.disabled = true;
            }
            else {
                class3.innerHTML = "空堂"
                class3.style.color = "black";
                fixbtn3.disabled = false;
            }
        }

    });

    let week4 = document.getElementById("week4");
    week4.addEventListener('change', function () {
        let week4value = this.value; // 获取选中的值

        if (week4value === 'SchA') {
            if (dataweek4 == SchA) {

                class4.innerHTML = "衝堂"
                class4.style.color = "red";
                fixbtn4.disabled = true;
            }
            else {
                class4.innerHTML = "空堂"
                class4.style.color = "black";
                fixbtn4.disabled = false;
            }
        }
        if (week4value === 'SchB') {
            if (dataweek4 == SchB) {

                class4.innerHTML = "衝堂"
                class4.style.color = "red";
                fixbtn4.disabled = true;
            }
            else {
                class4.innerHTML = "空堂"
                class4.style.color = "black";
                fixbtn4.disabled = false;
            }
        }
        if (week4value === 'SchC') {
            if (dataweek4 == SchC) {

                class4.innerHTML = "衝堂"
                class4.style.color = "red";
                fixbtn4.disabled = true;
            }
            else {
                class4.innerHTML = "空堂"
                class4.style.color = "black";
                fixbtn4.disabled = false;
            }
        }
        if (week4value === 'SchD') {

            if (dataweek4 == SchD) {

                class4.innerHTML = "衝堂"
                class4.style.color = "red";
                fixbtn4.disabled = true;
            }
            else {
                class4.innerHTML = "空堂"
                class4style.color = "black";
                fixbtn4.disabled = false;
            }
        }
        if (week4value === 'SchE') {
            if (dataweek4 == SchE) {

                class4.innerHTML = "衝堂"
                class4.style.color = "red";
                fixbtn3.disabled = true;
            }
            else {
                class4.innerHTML = "空堂"
                class4.style.color = "black";
                fixbtn3.disabled = false;
            }
        }
    });

    let week5 = document.getElementById("week5");
    week5.addEventListener('change', function () {
        let week5value = this.value; // 获取选中的值

        if (week5value === 'SchA') {
            if (dataweek5 == SchA) {

                class5.innerHTML = "衝堂"
                class5.style.color = "red";
                fixbtn5.disabled = true;
            }
            else {
                class5.innerHTML = "空堂"
                class5.style.color = "black";
                fixbtn5.disabled = false;
            }
        }
        if (week5value === 'SchB') {
            if (dataweek5 == SchB) {

                class5.innerHTML = "衝堂"
                class5.style.color = "red";
                fixbtn5.disabled = true;
            }
            else {
                class5.innerHTML = "空堂"
                class5.style.color = "black";
                fixbtn5.disabled = false;
            }
        }
        if (week5value === 'SchC') {
            if (dataweek5 == SchC) {

                class5.innerHTML = "衝堂"
                class5.style.color = "red";
                fixbtn5.disabled = true;
            }
            else {
                class5.innerHTML = "空堂"
                class5.style.color = "black";
                fixbtn5.disabled = false;
            }
        }
        if (week5value === 'SchD') {

            if (dataweek5 == SchD) {

                class5.innerHTML = "衝堂"
                class5.style.color = "red";
                fixbtn5.disabled = true;
            }
            else {
                class5.innerHTML = "空堂"
                class5.style.color = "black";
                fixbtn5.disabled = false;
            }
        }
        if (week5value === 'SchE') {
            if (dataweek5 == SchE) {

                class5.innerHTML = "衝堂"
                class5.style.color = "red";
                fixbtn5.disabled = true;
            }
            else {
                class5.innerHTML = "空堂"
                class5.style.color = "black";
                fixbtn5.disabled = false;
            }
        }

    });
</script>
<script>
    fixbtn1.addEventListener("click",function(){

        var week1class = week1.value;
        var subject = document.getElementById("subject1").value;

        var xhr = new XMLHttpRequest();
        xhr.open("POST", "/LectureClasses/Create", true);
        xhr.setRequestHeader("Content-Type", "application/json;charset=UTF-8");

        // 將selectedValue轉換為JSON格式
        var data = {
            Week : "星期一",
            Time : week1class,
            Subject : subject
        }

        xhr.onreadystatechange = function () {
            if (xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200) {
                window.location.href = "/LectureClasses/Create";
                var response = JSON.parse(xhr.responseText);

            }

        };
        xhr.send(JSON.stringify(data));
        alert("課表修改成功");

    })

    fixbtn2.addEventListener("click", function () {

        var week2class = week2.value;
        var subject = document.getElementById("subject2").value;

        var xhr = new XMLHttpRequest();
        xhr.open("POST", "/LectureClasses/Create", true);
        xhr.setRequestHeader("Content-Type", "application/json;charset=UTF-8");

        // 將selectedValue轉換為JSON格式
        var data = {
            Week: "星期二",
            Time: week2class,
            Subject: subject
        }

        xhr.onreadystatechange = function () {
            if (xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200) {
                // 請求成功，執行相應的處理邏輯
                var response = JSON.parse(xhr.responseText);

            }

        };
        xhr.send(JSON.stringify(data));
        alert("課表修改成功");
    })

    fixbtn3.addEventListener("click", function () {

        var week3class = week3.value;
        var subject = document.getElementById("subject3").value;

        var xhr = new XMLHttpRequest();
        xhr.open("POST", "/LectureClasses/Create", true);
        xhr.setRequestHeader("Content-Type", "application/json;charset=UTF-8");

        // 將selectedValue轉換為JSON格式
        var data = {
            Week: "星期三",
            Time: week3class,
            Subject: subject
        }

        xhr.onreadystatechange = function () {
            if (xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200) {
                // 請求成功，執行相應的處理邏輯
                alert("課表修改成功");
                var response = JSON.parse(xhr.responseText);

            }

        };
        xhr.send(JSON.stringify(data));
        alert("課表修改成功");
    })

    fixbtn4.addEventListener("click", function () {

        var week4class = week4.value;
        var subject = document.getElementById("subject4").value;

        var xhr = new XMLHttpRequest();
        xhr.open("POST", "/LectureClasses/Create", true);
        xhr.setRequestHeader("Content-Type", "application/json;charset=UTF-8");

        // 將selectedValue轉換為JSON格式
        var data = {
            Week: "星期四",
            Time: week4class,
            Subject: subject
        }

        xhr.onreadystatechange = function () {
            if (xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200) {
                // 請求成功，執行相應的處理邏輯
                alert("課表修改成功");
                var response = JSON.parse(xhr.responseText);

            }

        };
        xhr.send(JSON.stringify(data));
        alert("課表修改成功");
    })

    fixbtn5.addEventListener("click", function () {

        var week5class = week5.value;
        var subject = document.getElementById("subject5").value;

        var xhr = new XMLHttpRequest();
        xhr.open("POST", "/LectureClasses/Create", true);
        xhr.setRequestHeader("Content-Type", "application/json;charset=UTF-8");

        // 將selectedValue轉換為JSON格式
        var data = {
            Week: "星期五",
            Time: week5class,
            Subject: subject
        }

        xhr.onreadystatechange = function () {
            if (xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200) {
                // 請求成功，執行相應的處理邏輯
                alert("課表修改成功");
                var response = JSON.parse(xhr.responseText);

            }

        };
        xhr.send(JSON.stringify(data));
        alert("課表修改成功");
    })
</script>